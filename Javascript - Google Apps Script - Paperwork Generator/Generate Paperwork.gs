// -------------------------- VARIABLE DECLARATIONS --------------------------
  
// What row in the Paperwork Template does the Additions Request section and the Removal/Swaps section start?
let additionStartRow = 26;
let removeSwapStartRow = 53;

// How many rows are available in each section? This is used to throw an error if the row limit is exceeded. Please enforce restrictions on the Vend Request Form so that the limits are never exceeded in the first place. Additionally, keep in mind that Swaps will use 2 rows per entry.
let additionRowsAvailable = 10;
let removeSwapRowsAvailable = 20;


// -------------------------- FUNCTION 1 - POPULATE SHEET TEMPLATE - USES INCOMING SUBMISSION DATA TO GENERATE PAPERWORK --------------------------
function populateSheetTemplate(templateFile, destinationFolder, submissionData) {

// -------------------------- MAP INCOMING DATA TO VARIABLES FOR USAGE --------------------------
  try {
    const {

      // Generated by Zapier using Jotform Data
      submissionTitle = "",
      formTypeTagsString = "",
      
      // Raw Data passed from Jotform to Zapier
      collectorName = "",
      legalName = "",
      tradeName = "",
      address = "",
      city = "",
      state = "",
      zip = "",
      ownersName = "",
      ownersEmail = "",
      requestDate = "",
      targetDate = "",
      storePhone = "",
      split = "",
      county = "",
      ownersCell = "",
      contactCell = "",
      requestNotes = "",
      vCardConfig = "",
      printers = "",
      creditMethod = "",
      isInternetAvailable = "",
      internetAvailableDate = "",
      standupsStartingGameNumber = "",
      standupsMinBet = "",
      standupsMaxBet = "",
      standupsJackpot = "",
      fishStartingGameNumber = "",
      fishMinBet = "",
      fishMaxBet = "",
      fishBetInterval = "",
      isRemoveAll = ""

    } = submissionData;

    // Create a key map to connect the incoming data arrays' names with the desired names used in mapTerminalsToSheet()
    const terminalKeyMap = {
      "Quantity": "quantity",
      "Cabinet Type": "cabinetType",
      "Board / Game Name": "boardGameName",
      "Bill Acceptor": "billAcceptor",
      "Printer": "printer",
      "Other": "other",
      "Additional Details": "additionalDetails",
      "Cabinet Asset #": "cabinetAssetNumber",
      "Board Asset #": "boardAssetNumber",
      "Position": "position",
      "Request Type": "swapType",
      "Old Cabinet Asset #": "cabinetAssetNumberOld",
      "Old Board Asset #": "boardAssetNumberOld",
      "New Cabinet Asset #": "cabinetAssetNumberNew",
      "New Board Asset #": "boardAssetNumberNew"
    };

    // Make sure the requests parts are actually arrays
    const additionalTerminalsRaw = normalizeArray(submissionData.additionalTerminals);
    const removalTerminalsRaw = normalizeArray(submissionData.removalTerminals);
    const swapTerminalsRaw = normalizeArray(submissionData.swapTerminals);

    // Use that key map we just made a moment ago to put the replace the old naming scheme with our chosen variable names
    const additionalTerminals = normalizeKeys(additionalTerminalsRaw, terminalKeyMap);
    const removalTerminals = normalizeKeys(removalTerminalsRaw, terminalKeyMap);
    const swapTerminals = normalizeKeys(swapTerminalsRaw, terminalKeyMap);


// -------------------------- RUN CHECKS TO ENSURE REQUESTS ARE ARRAYS AND NOT OVER THE SPECIFIED LIMIT VARIABLES --------------------------

    if (!Array.isArray(additionalTerminals)) {
      throw new Error("Invalid format: additionalTerminals is not an array.");
    }

    // Enforce Limits
    if (additionalTerminals.length > additionRowsAvailable) throw new Error("Too many additions (limit " + additionRowsAvailable + "). Please ensure the method used to submit this request has a limit in place for how many requests users can make, and update the additionRowsAvailable variable to match in Google Apps Scripts > Game Request Form - Vend - Paperwork Generator > Generate Paperwork.gs)");
    
    if ((removalTerminals.length + swapTerminals.length * 2) > removeSwapRowsAvailable) throw new Error("Too many removal/swap rows (limit " + removeSwapRowsAvailable + "). Please ensure the method used to submit this request has a limit in place for how many requests users can make, and update the removeSwapRowsAvailable variable to match in Google Apps Scripts > Game Request Form - Vend - Paperwork Generator > Generate Paperwork.gs). Don't forget Swaps use up 2 rows per entry.");

// -------------------------- GENERATE THE FILE AND LOOK TO THE CORRECT WORKSHEET --------------------------

    var newFile = templateFile.makeCopy(submissionTitle , destinationFolder);
    var newSpreadsheet = SpreadsheetApp.openById(newFile.getId());
    var sheet = newSpreadsheet.getSheetByName('Vend Form');

// -------------------------- RUN SOME LOGIC ON INCOMING DATA BEFORE USING IT IN THE FORM --------------------------

    // Internet Availability Logic
    var internetAvailableValue = internetAvailableDate;
    if (isInternetAvailable) {
        internetAvailableValue = "Yes"
    }

    // Remove All option Logic
    const isCheckedRemoveAll = ["true", "yes"].includes(isRemoveAll.toString().toLowerCase());

// -------------------------- START PUTTING FINALIZED DATA INTO FIELDS --------------------------

    // Upper Section Location Fields
    sheet.getRange('F4').setValue(formTypeTagsString);
    sheet.getRange('I6').setValue(collectorName);
    sheet.getRange('I7').setValue(legalName);
    sheet.getRange('I8').setValue(tradeName);
    sheet.getRange('I9').setValue(address);
    sheet.getRange('I10').setValue(city + ", " + state + ", " + zip);
    sheet.getRange('I11').setValue(ownersName);
    sheet.getRange('I12').setValue(ownersEmail);
    sheet.getRange('AH6').setValue(requestDate);
    sheet.getRange('AH7').setValue(targetDate);
    sheet.getRange('AH8').setValue(storePhone);
    sheet.getRange('AH9').setValue(split);
    sheet.getRange('AH10').setValue(county);
    sheet.getRange('AH11').setValue(ownersCell);
    sheet.getRange('AH12').setValue(contactCell);

    // General Setup
    sheet.getRange('J20').setValue(vCardConfig);
    sheet.getRange('J21').setValue(printers);
    sheet.getRange('J22').setValue(creditMethod);
    sheet.getRange('J23').setValue(internetAvailableValue)

    // Standups Setup
    sheet.getRange('AF20').setValue(standupsStartingGameNumber);
    sheet.getRange('AF21').setValue(standupsMinBet + " / " + standupsMaxBet);
    sheet.getRange('AF22').setValue(standupsJackpot);

    // Fish Setup
    sheet.getRange('AS20').setValue(fishStartingGameNumber);
    sheet.getRange('AS21').setValue(fishMinBet + " / " + fishMaxBet);
    sheet.getRange('AS22').setValue(fishBetInterval);

    // Request Information (segregated all of this into a separate function since it's complex)
    mapTerminalsToSheet(sheet, additionalTerminals, removalTerminals, swapTerminals)

    // Notes and Other
    sheet.getRange('U15').setValue(requestNotes);
    sheet.getRange('Y38').setValue(isCheckedRemoveAll);

// -------------------------- RETURN SOME INFO FOR ZAPIER --------------------------

    return {

      // File ID
      fileId: newFile.getId(),

      // File URL
      fileUrl: newSpreadsheet.getUrl() 

    };
  } catch (error) {
    Logger.log("Error creating sheet template: " + error.toString());

    return {
      success: false,
      errorMessage: error.message,
      errorStack: error.stack || "No stack trace available"
    };
  }
}


// -------------------------- FUNCTION 2 - MAP TERMINALS TO SHEET - MAPS THE ARRAYS DATA IN THE REQUESTS TO ROWS IN THE PAPERWORK --------------------------
function mapTerminalsToSheet(sheet, additionalTerminals, removalTerminals, swapTerminals) {

// -------------------------- ADDITIONS --------------------------

  let additionCurrentRow = additionStartRow;

  if (Array.isArray(additionalTerminals) && additionalTerminals.length > 0) {
    additionalTerminals.forEach(entry => {
      sheet.getRange(`D${additionCurrentRow}`).setValue(entry.quantity);
      sheet.getRange(`G${additionCurrentRow}`).setValue(entry.cabinetType);
      sheet.getRange(`M${additionCurrentRow}`).setValue(entry.boardGameName);
      sheet.getRange(`S${additionCurrentRow}`).setValue(entry.billAcceptor);
      sheet.getRange(`Y${additionCurrentRow}`).setValue(entry.printer);
      sheet.getRange(`AF${additionCurrentRow}`).setValue(entry.other);
      sheet.getRange(`AN${additionCurrentRow}`).setValue(entry.additionalDetails);
      additionCurrentRow++;
    });
  }

  let removeSwapCurrentRow = removeSwapStartRow; // This is shared between Removals and Swaps since they share a section

// -------------------------- REMOVALS --------------------------

  if (Array.isArray(removalTerminals) && removalTerminals.length > 0) {
    removalTerminals.forEach(entry => {
      sheet.getRange(`B${removeSwapCurrentRow}`).setValue(entry.position);
      sheet.getRange(`D${removeSwapCurrentRow}`).setValue("REMOVAL");
      sheet.getRange(`J${removeSwapCurrentRow}`).setValue(entry.boardGameName);
      sheet.getRange(`N${removeSwapCurrentRow}`).setValue(entry.boardAssetNumber);
      sheet.getRange(`Q${removeSwapCurrentRow}`).setValue(entry.cabinetAssetNumber);
      sheet.getRange(`T${removeSwapCurrentRow}`).setValue(entry.cabinetType);
      sheet.getRange(`AM${removeSwapCurrentRow}`).setValue(entry.additionalDetails);
      removeSwapCurrentRow++;
    });
  }

// -------------------------- SWAPS --------------------------

  if (Array.isArray(swapTerminals) && swapTerminals.length > 0) {
    swapTerminals.forEach(entry => {
      // Row A â€” OLD
      sheet.getRange(`B${removeSwapCurrentRow}`).setValue(entry.position);
      sheet.getRange(`D${removeSwapCurrentRow}`).setValue("SWAP (OLD)");
      sheet.getRange(`N${removeSwapCurrentRow}`).setValue(entry.boardAssetNumberOld);
      sheet.getRange(`Q${removeSwapCurrentRow}`).setValue(entry.cabinetAssetNumberOld);
      sheet.getRange(`AM${removeSwapCurrentRow}`).setValue(entry.swapType);
      removeSwapCurrentRow++;

      // Row B â€” NEW
      sheet.getRange(`B${removeSwapCurrentRow}`).setValue(entry.position);
      sheet.getRange(`D${removeSwapCurrentRow}`).setValue("SWAP (NEW)");
      sheet.getRange(`N${removeSwapCurrentRow}`).setValue(entry.boardAssetNumberNew);
      sheet.getRange(`Q${removeSwapCurrentRow}`).setValue(entry.cabinetAssetNumberNew);
      sheet.getRange(`AM${removeSwapCurrentRow}`).setValue(entry.additionalDetails);
      removeSwapCurrentRow++;
    });
  }
}
